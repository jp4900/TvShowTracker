// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TvShowTrackerAPI.Data;

#nullable disable

namespace TvShowTrackerAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251012184358_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TvShowTrackerAPI.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<decimal?>("Popularity")
                        .HasColumnType("numeric");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Popularity");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("StillPath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseDate");

                    b.HasIndex("TvShowId", "SeasonNumber", "EpisodeNumber");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.FavoriteTvShow", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.HasIndex("UserId", "AddedAt");

                    b.ToTable("FavoriteTvShows");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserId", "IsRevoked", "ExpiresAt");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackdropUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfEpisodes")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSeasons")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("text");

                    b.Property<decimal>("Popularity")
                        .HasColumnType("numeric");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Popularity");

                    b.HasIndex("Rating");

                    b.HasIndex("ReleaseDate");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("Type");

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShowActor", b =>
                {
                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CharacterName")
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("TvShowId", "ActorId");

                    b.HasIndex("ActorId");

                    b.HasIndex("TvShowId", "Order");

                    b.ToTable("TvShowActors");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShowGenre", b =>
                {
                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("TvShowId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TvShowGenres");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AccountDeletionRequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExportRequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataExportToken")
                        .HasColumnType("text");

                    b.Property<bool>("DataProcessingConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.UserRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EmailSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId");

                    b.HasIndex("EmailSent", "CreatedAt");

                    b.HasIndex("UserId", "Score");

                    b.ToTable("UserRecommendations");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.Episode", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.TvShow", "TvShow")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.FavoriteTvShow", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.TvShow", "TvShow")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TvShowTrackerAPI.Models.User", "User")
                        .WithMany("FavoriteTvShows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShowActor", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.Actor", "Actor")
                        .WithMany("TvShows")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TvShowTrackerAPI.Models.TvShow", "TvShow")
                        .WithMany("Actors")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShowGenre", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.Genre", "Genre")
                        .WithMany("TvShows")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TvShowTrackerAPI.Models.TvShow", "TvShow")
                        .WithMany("Genres")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.UserRecommendation", b =>
                {
                    b.HasOne("TvShowTrackerAPI.Models.TvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TvShowTrackerAPI.Models.User", "User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.Actor", b =>
                {
                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.Genre", b =>
                {
                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.TvShow", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Episodes");

                    b.Navigation("FavoritedBy");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("TvShowTrackerAPI.Models.User", b =>
                {
                    b.Navigation("FavoriteTvShows");

                    b.Navigation("Recommendations");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
